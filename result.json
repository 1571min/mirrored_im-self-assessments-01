{"numFailedTestSuites":2,"numFailedTests":12,"numPassedTestSuites":0,"numPassedTests":3,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":2,"numTotalTests":15,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1569135988744,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should exist on the Tree prototype","location":null,"status":"passed","title":"should exist on the Tree prototype"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should be a function","location":null,"status":"passed","title":"should be a function"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mTree\u001b[39m\n\nReceived value has no prototype\nReceived value: \u001b[31mundefined\u001b[39m\n    at Object.toBeInstanceOf (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:29:20)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a Tree instance","location":null,"status":"failed","title":"should return a Tree instance"},{"ancestorTitles":["tree map"],"failureMessages":[],"fullName":"tree map should return a new Tree instance, not the existing one (depth 0)","location":null,"status":"passed","title":"should return a new Tree instance, not the existing one (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m{\"children\": [], \"value\": \"root\"}\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:49:20)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a new Tree instance, not the existing one (depth 1)","location":null,"status":"failed","title":"should return a new Tree instance, not the existing one (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mTree\u001b[39m\n\nReceived value has no prototype\nReceived value: \u001b[31mundefined\u001b[39m\n    at toBeInstanceOf (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:4:18)\n    at Object.verifyTree (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:65:5)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 0)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mTree\u001b[39m\n\nReceived value has no prototype\nReceived value: \u001b[31mundefined\u001b[39m\n    at toBeInstanceOf (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:4:18)\n    at Object.verifyTree (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:82:5)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 1)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":["TypeError: Cannot read property 'addChild' of undefined\n    at Object.addChild (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:97:23)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 2)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":["TypeError: Cannot read property 'addChild' of undefined\n    at Object.addChild (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:119:23)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return an identical tree when the map function is identity (depth 3)","location":null,"status":"failed","title":"should return an identical tree when the map function is identity (depth 3)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mTree\u001b[39m\n\nReceived value has no prototype\nReceived value: \u001b[31mundefined\u001b[39m\n    at toBeInstanceOf (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:4:18)\n    at Object.verifyTree (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:143:5)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 0)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 0)"},{"ancestorTitles":["tree map"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mTree\u001b[39m\n\nReceived value has no prototype\nReceived value: \u001b[31mundefined\u001b[39m\n    at toBeInstanceOf (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:4:18)\n    at Object.verifyTree (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:163:5)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 1)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 1)"},{"ancestorTitles":["tree map"],"failureMessages":["TypeError: Cannot read property 'addChild' of undefined\n    at Object.addChild (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:182:23)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 2)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 2)"},{"ancestorTitles":["tree map"],"failureMessages":["TypeError: Cannot read property 'addChild' of undefined\n    at Object.addChild (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js:212:23)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"tree map should return a tree with doubled values if the function doubles the value (depth 3)","location":null,"status":"failed","title":"should return a tree with doubled values if the function doubles the value (depth 3)"}],"endTime":1569135989882,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a Tree instance\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mTree\u001b[39m\n\n    Received value has no prototype\n    Received value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 | \u001b[39m    }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 | \u001b[39m    \u001b[36mvar\u001b[39m result \u001b[33m=\u001b[39m root\u001b[33m.\u001b[39mmap(identity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 29 | \u001b[39m    expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                   \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 | \u001b[39m  it(\u001b[32m\"should return a new Tree instance, not the existing one (depth 0)\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36mfunction\u001b[39m() {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeInstanceOf (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:29:20)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a new Tree instance, not the existing one (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m{\"children\": [], \"value\": \"root\"}\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 | \u001b[39m    }\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 | \u001b[39m    \u001b[36mvar\u001b[39m result \u001b[33m=\u001b[39m root\u001b[33m.\u001b[39mmap(identity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 49 | \u001b[39m    expect(result)\u001b[33m.\u001b[39mtoEqual(root)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                   \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 50 | \u001b[39m    expect(result\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(child1)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 | \u001b[39m    expect(result\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m])\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(child2)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 52 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:49:20)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 0)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mTree\u001b[39m\n\n    Received value has no prototype\n    Received value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                 \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBeInstanceOf (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:4:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:65:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mTree\u001b[39m\n\n    Received value has no prototype\n    Received value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                 \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBeInstanceOf (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:4:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:82:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 2)\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property 'addChild' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 | \u001b[39m    input\u001b[33m.\u001b[39maddChild(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  96 | \u001b[39m    \u001b[90m// depth: 2\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m  97 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m4\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                      \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  98 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  99 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m8\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.addChild (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:97:23)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return an identical tree when the map function is identity (depth 3)\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property 'addChild' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m    input\u001b[33m.\u001b[39maddChild(\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 118 | \u001b[39m    \u001b[90m// depth: 2\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 119 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m4\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                      \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 120 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 122 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m8\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.addChild (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:119:23)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 0)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mTree\u001b[39m\n\n    Received value has no prototype\n    Received value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                 \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBeInstanceOf (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:4:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:143:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 1)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mTree\u001b[39m\n\n    Received value has no prototype\n    Received value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39m\u001b[36mconst\u001b[39m verifyTree \u001b[33m=\u001b[39m \u001b[36mfunction\u001b[39m(result\u001b[33m,\u001b[39m expectation) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 4 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mTree\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m                 \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m  expect(result\u001b[33m.\u001b[39mvalue)\u001b[33m.\u001b[39mtoEqual(expectation\u001b[33m.\u001b[39mvalue)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m  expect(result)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBe(expectation)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  expect(result\u001b[33m.\u001b[39mchildren)\u001b[33m.\u001b[39mtoHaveLength(expectation\u001b[33m.\u001b[39mchildren\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBeInstanceOf (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:4:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.verifyTree (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:163:5)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 2)\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property 'addChild' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 180 | \u001b[39m    output\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 181 | \u001b[39m    \u001b[90m// depth: 2\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 182 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m4\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                      \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 183 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 184 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 185 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m8\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.addChild (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:182:23)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mtree map › should return a tree with doubled values if the function doubles the value (depth 3)\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property 'addChild' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 210 | \u001b[39m    output\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 211 | \u001b[39m    \u001b[90m// depth: 2\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 212 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m4\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                      \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 213 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m5\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 214 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m6\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 215 | \u001b[39m    input\u001b[33m.\u001b[39mchildren[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39maddChild(\u001b[35m8\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.addChild (\u001b[2m\u001b[0m\u001b[36mtree-map/tree-map.test.js\u001b[39m\u001b[0m\u001b[2m:212:23)\u001b[2m\u001b[22m\n","name":"/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/tree-map/tree-map.test.js","startTime":1569135989328,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["student"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: not \u001b[32m\"스프린트를 진행하는 수강생분의 이름을 한글로! 적어주세요! 예)존도우\"\u001b[39m\n\n    at Object.toEqual (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/__test__/student.test.js:7:37)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"student put correct name on student.json","location":null,"status":"failed","title":"put correct name on student.json"},{"ancestorTitles":["student"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: not \u001b[32m\"기수를 숫자만! 입력해주세요! 예)10\"\u001b[39m\n\n    at Object.toEqual (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/__test__/student.test.js:12:38)\n    at Object.asyncJestTest (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"student put correct class on student.json","location":null,"status":"failed","title":"put correct class on student.json"}],"endTime":1569135989938,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mstudent › put correct name on student.json\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: not \u001b[32m\"스프린트를 진행하는 수강생분의 이름을 한글로! 적어주세요! 예)존도우\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  5 | \u001b[39m    \u001b[36mconst\u001b[39m rawName \u001b[33m=\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  6 | \u001b[39m      \u001b[32m\"스프린트를 진행하는 수강생분의 이름을 한글로! 적어주세요! 예)존도우\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m  7 | \u001b[39m    expect(studentData\u001b[33m.\u001b[39mstudent)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoEqual(rawName)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                    \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  8 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 10 | \u001b[39m  test(\u001b[32m\"put correct class on student.json\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36m__test__/student.test.js\u001b[39m\u001b[0m\u001b[2m:7:37)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mstudent › put correct class on student.json\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mnot\u001b[2m.\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: not \u001b[32m\"기수를 숫자만! 입력해주세요! 예)10\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 10 | \u001b[39m  test(\u001b[32m\"put correct class on student.json\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 | \u001b[39m    \u001b[36mconst\u001b[39m rawClass \u001b[33m=\u001b[39m \u001b[32m\"기수를 숫자만! 입력해주세요! 예)10\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 12 | \u001b[39m    expect(studentData\u001b[33m.\u001b[39mtheClass)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoEqual(rawClass)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                     \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 14 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36m__test__/student.test.js\u001b[39m\u001b[0m\u001b[2m:12:38)\u001b[2m\u001b[22m\n","name":"/Users/coderoom2018/Documents/codeStates/Immersive/New Common Repository/self-assessments-01/__test__/student.test.js","startTime":1569135989894,"status":"failed","summary":""}],"wasInterrupted":false}